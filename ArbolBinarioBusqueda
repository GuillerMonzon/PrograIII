import graphviz

class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

class BinarySearchTree:
    def __init__(self):
        self.root = None

    def insert(self, key):
        self.root = self._insert_recursive(self.root, key)

    def _insert_recursive(self, root, key):
        if root is None:
            return Node(key)
        if key < root.key:
            root.left = self._insert_recursive(root.left, key)
        else:
            root.right = self._insert_recursive(root.right, key)
        return root

    def search(self, key):
        return self._search_recursive(self.root, key)

    def _search_recursive(self, root, key):
        if root is None or root.key == key:
            return root
        if key < root.key:
            return self._search_recursive(root.left, key)
        return self._search_recursive(root.right, key)

    def delete(self, key):
        self.root = self._delete_recursive(self.root, key)

    def _delete_recursive(self, root, key):
        if root is None:
            return root
        if key < root.key:
            root.left = self._delete_recursive(root.left, key)
        elif key > root.key:
            root.right = self._delete_recursive(root.right, key)
        else:
            if root.left is None:
                return root.right
            elif root.right is None:
                return root.left
            root.key = self._min_value_node(root.right).key
            root.right = self._delete_recursive(root.right, root.key)
        return root

    def _min_value_node(self, node):
        current = node
        while current.left is not None:
            current = current.left
        return current

    def inorder_traversal(self):
        self._inorder_recursive(self.root)

    def _inorder_recursive(self, root):
        if root:
            self._inorder_recursive(root.left)
            print(root.key, end=" ")
            self._inorder_recursive(root.right)

    def to_graphviz(self, filename):
        dot = graphviz.Digraph(comment='Binary Search Tree')
        self._add_nodes_to_graphviz(dot, self.root)
        dot.render(filename, format='png', cleanup=True)

    def _add_nodes_to_graphviz(self, dot, root):
        if root:
            dot.node(str(root.key))
            if root.left:
                dot.edge(str(root.key), str(root.left.key))
                self._add_nodes_to_graphviz(dot, root.left)
            if root.right:
                dot.edge(str(root.key), str(root.right.key))
                self._add_nodes_to_graphviz(dot, root.right)

def load_from_file(filename):
    with open(filename, 'r') as file:
        data = file.read().splitlines()
    return list(map(int, data))

def main():
    bst = BinarySearchTree()
    while True:
        print("\nMenú:")
        print("1. Insertar un nodo")
        print("2. Buscar un nodo")
        print("3. Eliminar un nodo")
        print("4. Cargar desde un archivo")
        print("5. Convertir a binario y visualizar")
        print("6. Salir")
        choice = input("Ingrese su elección: ")
        if choice == '1':
            key = int(input("Ingrese el valor del nodo a insertar: "))
            bst.insert(key)
        elif choice == '2':
            key = int(input("Ingrese el valor del nodo a buscar: "))
            if bst.search(key):
                print("El nodo está presente en el árbol.")
            else:
                print("El nodo no está presente en el árbol.")
        elif choice == '3':
            key = int(input("Ingrese el valor del nodo a eliminar: "))
            bst.delete(key)
            print("Nodo eliminado.")
        elif choice == '4':
            filename = input("Ingrese la ruta del archivo: ")
            try:
                data = load_from_file(filename)
                for item in data:
                    bst.insert(item)
                print("Datos cargados exitosamente desde el archivo.")
            except FileNotFoundError:
                print("El archivo no fue encontrado.")
        elif choice == '5':
            filename = "binary_search_tree"
            bst.to_graphviz(filename)
            print(f"Árbol convertido a binario y visualizado. Puede encontrar la imagen en {filename}.png.")
        elif choice == '6':
            print("Saliendo...")
            break
        else:
            print("Opción inválida. Por favor, ingrese un número del 1 al 6.")

if __name__ == "__main__":
    main()
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Este codigo permite crear, manipular y visualizar un arbol binario en busqueda a través de una interfaz de línea de comandos. 
Se pueden insertar nodos, buscar, eliminar, cargar datos desde un archivo .txt y convertir el árbol en un gráfico binario visualizado en graphviz.
